How to use the 7-base_geometry module

Importing the class from the module:
	>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Checking for class docstring:
	>>> class_doc = __import__("7-base_geometry").BaseGeometry.__doc__
	>>> len(class_doc) > 1
	True

Checking for area failure:
	>>> test = BaseGeometry()
	>>> test.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Checking too many arguments for area:
	>>> test.area(1)
	Traceback (most recent call last):
	...
	TypeError: area() takes 1 positional argument but 2 were given

Checking for integer validator while passing integer:
	>>> test.integer_validator("integer", 1)

Checking for integer == 0:
	>>> test.integer_validator("integer", 0)
	Traceback (most recent call last):
	...
	ValueError: integer must be greater than 0

Checking for integer < 0:
	>>> test.integer_validator("integer", -6)
	Traceback (most recent call last):
	...
	ValueError: integer must be greater than 0

Checking for non_integer types:
	>>> test.integer_validator("float", 1.6)
	Traceback (most recent call last):
	...
	TypeError: float must be an integer
	>>> test.integer_validator("string", "world")
	Traceback (most recent call last):
	...
	TypeError: string must be an integer
	>>> test.integer_validator("tuple", (3, 6))
	Traceback (most recent call last):
	...
	TypeError: tuple must be an integer
	>>> test.integer_validator("list", [1, 2, 3, 4])
	Traceback (most recent call last):
	...
	TypeError: list must be an integer
	>>> test.integer_validator("dict", {"key": "value"})
	Traceback (most recent call last):
	...
	TypeError: dict must be an integer
	
Checking for no arguments to integer validator:
	>>> test.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for too many arguments:
	>>> test.integer_validator("integer", 3, 4)
	Traceback (most recent call last):
	...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given
